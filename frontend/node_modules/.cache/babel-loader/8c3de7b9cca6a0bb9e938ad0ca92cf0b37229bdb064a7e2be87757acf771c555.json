{"ast":null,"code":"// Notification service for scheduled expense reminders\n\nclass NotificationService {\n  constructor() {\n    this.permission = 'default';\n    this.init();\n  }\n  async init() {\n    // Request notification permission on initialization\n    if ('Notification' in window) {\n      this.permission = await Notification.requestPermission();\n      console.log('Notification permission:', this.permission);\n    }\n  }\n  async requestPermission() {\n    if ('Notification' in window) {\n      this.permission = await Notification.requestPermission();\n      return this.permission === 'granted';\n    }\n    return false;\n  }\n\n  // Show browser notification\n  showNotification(title, options = {}) {\n    if (this.permission !== 'granted') {\n      console.log('Notifications not permitted');\n      return false;\n    }\n    const defaultOptions = {\n      icon: '/favicon.ico',\n      badge: '/favicon.ico',\n      tag: 'expense-reminder',\n      requireInteraction: true,\n      actions: [{\n        action: 'view',\n        title: 'View Details'\n      }, {\n        action: 'dismiss',\n        title: 'Dismiss'\n      }]\n    };\n    const notification = new Notification(title, {\n      ...defaultOptions,\n      ...options\n    });\n\n    // Handle notification clicks\n    notification.onclick = () => {\n      window.focus();\n      notification.close();\n      if (options.onClick) {\n        options.onClick();\n      }\n    };\n\n    // Auto-close after 10 seconds\n    setTimeout(() => {\n      notification.close();\n    }, 10000);\n    return true;\n  }\n\n  // Check for due expenses and show notifications\n  async checkDueExpenses() {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return;\n      const response = await fetch('http://127.0.0.1:5000/api/expenses/future/due', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) return;\n      const dueExpenses = await response.json();\n\n      // Show notifications for due expenses\n      dueExpenses.forEach(expense => {\n        this.showDueExpenseNotification(expense);\n      });\n      return dueExpenses.length;\n    } catch (error) {\n      console.error('Error checking due expenses:', error);\n      return 0;\n    }\n  }\n\n  // Show notification for a specific due expense\n  showDueExpenseNotification(expense) {\n    var _expense$amount;\n    const title = `ðŸ’° Expense Due: ${expense.title}`;\n    const options = {\n      body: `Amount: â‚¹${(_expense$amount = expense.amount) === null || _expense$amount === void 0 ? void 0 : _expense$amount.toLocaleString()}\\nCategory: ${expense.category}\\nDue: ${this.formatDate(expense.scheduledDate)}`,\n      icon: '/favicon.ico',\n      tag: `expense-${expense.id}`,\n      data: expense,\n      onClick: () => {\n        // Could navigate to expense details or scheduled expenses page\n        console.log('Clicked expense notification:', expense);\n      }\n    };\n    return this.showNotification(title, options);\n  }\n\n  // Show notification for upcoming expenses (reminder)\n  showUpcomingExpenseNotification(expense, daysAhead) {\n    var _expense$amount2;\n    const title = `ðŸ”” Expense Reminder: ${expense.title}`;\n    const daysText = daysAhead === 1 ? 'tomorrow' : `in ${daysAhead} days`;\n    const options = {\n      body: `Amount: â‚¹${(_expense$amount2 = expense.amount) === null || _expense$amount2 === void 0 ? void 0 : _expense$amount2.toLocaleString()}\\nDue: ${daysText}\\nCategory: ${expense.category}`,\n      icon: '/favicon.ico',\n      tag: `reminder-${expense.id}`,\n      data: expense\n    };\n    return this.showNotification(title, options);\n  }\n\n  // Check for upcoming expenses based on notification settings\n  async checkUpcomingExpenses() {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return;\n      const response = await fetch('http://127.0.0.1:5000/api/expenses/future', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) return;\n      const futureExpenses = await response.json();\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      let notificationCount = 0;\n      futureExpenses.forEach(expense => {\n        var _expense$notification;\n        if (expense.status !== 'scheduled' || !((_expense$notification = expense.notificationSettings) !== null && _expense$notification !== void 0 && _expense$notification.enabled)) {\n          return;\n        }\n        const scheduledDate = new Date(expense.scheduledDate);\n        scheduledDate.setHours(0, 0, 0, 0);\n        const daysDiff = Math.ceil((scheduledDate - today) / (1000 * 60 * 60 * 24));\n        const notifyDaysBefore = expense.notificationSettings.daysBefore || 1;\n        if (daysDiff === notifyDaysBefore) {\n          this.showUpcomingExpenseNotification(expense, daysDiff);\n          notificationCount++;\n        }\n      });\n      return notificationCount;\n    } catch (error) {\n      console.error('Error checking upcoming expenses:', error);\n      return 0;\n    }\n  }\n\n  // Start periodic checking for due/upcoming expenses\n  startPeriodicCheck(intervalMinutes = 60) {\n    // Check immediately\n    this.checkDueExpenses();\n    this.checkUpcomingExpenses();\n\n    // Set up periodic checking\n    const interval = intervalMinutes * 60 * 1000; // Convert to milliseconds\n\n    setInterval(() => {\n      this.checkDueExpenses();\n      this.checkUpcomingExpenses();\n    }, interval);\n    console.log(`Started periodic expense checking every ${intervalMinutes} minutes`);\n  }\n\n  // Format date for display\n  formatDate(dateStr) {\n    if (!dateStr) return 'N/A';\n    return new Intl.DateTimeFormat('en-IN', {\n      timeZone: 'Asia/Kolkata',\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    }).format(new Date(dateStr));\n  }\n\n  // Show summary notification\n  showSummaryNotification(dueCount, upcomingCount) {\n    if (dueCount === 0 && upcomingCount === 0) return;\n    let title = 'ðŸ’¼ Expense Tracker Update';\n    let body = '';\n    if (dueCount > 0) {\n      body += `${dueCount} expense${dueCount > 1 ? 's' : ''} due now`;\n    }\n    if (upcomingCount > 0) {\n      if (body) body += ', ';\n      body += `${upcomingCount} upcoming expense${upcomingCount > 1 ? 's' : ''}`;\n    }\n    return this.showNotification(title, {\n      body\n    });\n  }\n\n  // Manual notification for testing\n  showTestNotification() {\n    return this.showNotification('ðŸ§ª Test Notification', {\n      body: 'This is a test notification from Expense Tracker!',\n      tag: 'test-notification'\n    });\n  }\n}\n\n// Create and export singleton instance\nconst notificationService = new NotificationService();\nexport default notificationService;","map":{"version":3,"names":["NotificationService","constructor","permission","init","window","Notification","requestPermission","console","log","showNotification","title","options","defaultOptions","icon","badge","tag","requireInteraction","actions","action","notification","onclick","focus","close","onClick","setTimeout","checkDueExpenses","token","localStorage","getItem","response","fetch","headers","ok","dueExpenses","json","forEach","expense","showDueExpenseNotification","length","error","_expense$amount","body","amount","toLocaleString","category","formatDate","scheduledDate","id","data","showUpcomingExpenseNotification","daysAhead","_expense$amount2","daysText","checkUpcomingExpenses","futureExpenses","today","Date","setHours","notificationCount","_expense$notification","status","notificationSettings","enabled","daysDiff","Math","ceil","notifyDaysBefore","daysBefore","startPeriodicCheck","intervalMinutes","interval","setInterval","dateStr","Intl","DateTimeFormat","timeZone","year","month","day","format","showSummaryNotification","dueCount","upcomingCount","showTestNotification","notificationService"],"sources":["D:/expense-tracker/frontend/src/services/notificationService.js"],"sourcesContent":["// Notification service for scheduled expense reminders\r\n\r\nclass NotificationService {\r\n  constructor() {\r\n    this.permission = 'default';\r\n    this.init();\r\n  }\r\n\r\n  async init() {\r\n    // Request notification permission on initialization\r\n    if ('Notification' in window) {\r\n      this.permission = await Notification.requestPermission();\r\n      console.log('Notification permission:', this.permission);\r\n    }\r\n  }\r\n\r\n  async requestPermission() {\r\n    if ('Notification' in window) {\r\n      this.permission = await Notification.requestPermission();\r\n      return this.permission === 'granted';\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Show browser notification\r\n  showNotification(title, options = {}) {\r\n    if (this.permission !== 'granted') {\r\n      console.log('Notifications not permitted');\r\n      return false;\r\n    }\r\n\r\n    const defaultOptions = {\r\n      icon: '/favicon.ico',\r\n      badge: '/favicon.ico',\r\n      tag: 'expense-reminder',\r\n      requireInteraction: true,\r\n      actions: [\r\n        {\r\n          action: 'view',\r\n          title: 'View Details'\r\n        },\r\n        {\r\n          action: 'dismiss',\r\n          title: 'Dismiss'\r\n        }\r\n      ]\r\n    };\r\n\r\n    const notification = new Notification(title, {\r\n      ...defaultOptions,\r\n      ...options\r\n    });\r\n\r\n    // Handle notification clicks\r\n    notification.onclick = () => {\r\n      window.focus();\r\n      notification.close();\r\n      if (options.onClick) {\r\n        options.onClick();\r\n      }\r\n    };\r\n\r\n    // Auto-close after 10 seconds\r\n    setTimeout(() => {\r\n      notification.close();\r\n    }, 10000);\r\n\r\n    return true;\r\n  }\r\n\r\n  // Check for due expenses and show notifications\r\n  async checkDueExpenses() {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) return;\r\n\r\n      const response = await fetch('http://127.0.0.1:5000/api/expenses/future/due', {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (!response.ok) return;\r\n\r\n      const dueExpenses = await response.json();\r\n\r\n      // Show notifications for due expenses\r\n      dueExpenses.forEach(expense => {\r\n        this.showDueExpenseNotification(expense);\r\n      });\r\n\r\n      return dueExpenses.length;\r\n    } catch (error) {\r\n      console.error('Error checking due expenses:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  // Show notification for a specific due expense\r\n  showDueExpenseNotification(expense) {\r\n    const title = `ðŸ’° Expense Due: ${expense.title}`;\r\n    const options = {\r\n      body: `Amount: â‚¹${expense.amount?.toLocaleString()}\\nCategory: ${expense.category}\\nDue: ${this.formatDate(expense.scheduledDate)}`,\r\n      icon: '/favicon.ico',\r\n      tag: `expense-${expense.id}`,\r\n      data: expense,\r\n      onClick: () => {\r\n        // Could navigate to expense details or scheduled expenses page\r\n        console.log('Clicked expense notification:', expense);\r\n      }\r\n    };\r\n\r\n    return this.showNotification(title, options);\r\n  }\r\n\r\n  // Show notification for upcoming expenses (reminder)\r\n  showUpcomingExpenseNotification(expense, daysAhead) {\r\n    const title = `ðŸ”” Expense Reminder: ${expense.title}`;\r\n    const daysText = daysAhead === 1 ? 'tomorrow' : `in ${daysAhead} days`;\r\n    const options = {\r\n      body: `Amount: â‚¹${expense.amount?.toLocaleString()}\\nDue: ${daysText}\\nCategory: ${expense.category}`,\r\n      icon: '/favicon.ico',\r\n      tag: `reminder-${expense.id}`,\r\n      data: expense\r\n    };\r\n\r\n    return this.showNotification(title, options);\r\n  }\r\n\r\n  // Check for upcoming expenses based on notification settings\r\n  async checkUpcomingExpenses() {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) return;\r\n\r\n      const response = await fetch('http://127.0.0.1:5000/api/expenses/future', {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (!response.ok) return;\r\n\r\n      const futureExpenses = await response.json();\r\n      const today = new Date();\r\n      today.setHours(0, 0, 0, 0);\r\n\r\n      let notificationCount = 0;\r\n\r\n      futureExpenses.forEach(expense => {\r\n        if (expense.status !== 'scheduled' || !expense.notificationSettings?.enabled) {\r\n          return;\r\n        }\r\n\r\n        const scheduledDate = new Date(expense.scheduledDate);\r\n        scheduledDate.setHours(0, 0, 0, 0);\r\n\r\n        const daysDiff = Math.ceil((scheduledDate - today) / (1000 * 60 * 60 * 24));\r\n        const notifyDaysBefore = expense.notificationSettings.daysBefore || 1;\r\n\r\n        if (daysDiff === notifyDaysBefore) {\r\n          this.showUpcomingExpenseNotification(expense, daysDiff);\r\n          notificationCount++;\r\n        }\r\n      });\r\n\r\n      return notificationCount;\r\n    } catch (error) {\r\n      console.error('Error checking upcoming expenses:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  // Start periodic checking for due/upcoming expenses\r\n  startPeriodicCheck(intervalMinutes = 60) {\r\n    // Check immediately\r\n    this.checkDueExpenses();\r\n    this.checkUpcomingExpenses();\r\n\r\n    // Set up periodic checking\r\n    const interval = intervalMinutes * 60 * 1000; // Convert to milliseconds\r\n    \r\n    setInterval(() => {\r\n      this.checkDueExpenses();\r\n      this.checkUpcomingExpenses();\r\n    }, interval);\r\n\r\n    console.log(`Started periodic expense checking every ${intervalMinutes} minutes`);\r\n  }\r\n\r\n  // Format date for display\r\n  formatDate(dateStr) {\r\n    if (!dateStr) return 'N/A';\r\n    return new Intl.DateTimeFormat('en-IN', {\r\n      timeZone: 'Asia/Kolkata',\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric'\r\n    }).format(new Date(dateStr));\r\n  }\r\n\r\n  // Show summary notification\r\n  showSummaryNotification(dueCount, upcomingCount) {\r\n    if (dueCount === 0 && upcomingCount === 0) return;\r\n\r\n    let title = 'ðŸ’¼ Expense Tracker Update';\r\n    let body = '';\r\n\r\n    if (dueCount > 0) {\r\n      body += `${dueCount} expense${dueCount > 1 ? 's' : ''} due now`;\r\n    }\r\n\r\n    if (upcomingCount > 0) {\r\n      if (body) body += ', ';\r\n      body += `${upcomingCount} upcoming expense${upcomingCount > 1 ? 's' : ''}`;\r\n    }\r\n\r\n    return this.showNotification(title, { body });\r\n  }\r\n\r\n  // Manual notification for testing\r\n  showTestNotification() {\r\n    return this.showNotification('ðŸ§ª Test Notification', {\r\n      body: 'This is a test notification from Expense Tracker!',\r\n      tag: 'test-notification'\r\n    });\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nconst notificationService = new NotificationService();\r\n\r\nexport default notificationService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}