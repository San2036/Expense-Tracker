{"ast":null,"code":"// Export utility functions for CSV and Excel generation\n\n// Format date for display\nconst formatDate = dateStr => {\n  if (!dateStr) return '';\n  const date = new Date(dateStr);\n  return new Intl.DateTimeFormat('en-IN', {\n    timeZone: 'Asia/Kolkata',\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit'\n  }).format(date);\n};\n\n// Convert expenses to CSV format\nexport const exportToCSV = (expenses, filename = 'expenses') => {\n  if (!expenses || expenses.length === 0) {\n    alert('No data to export');\n    return;\n  }\n\n  // CSV headers\n  const headers = ['Date', 'Type', 'Description', 'Amount (₹)', 'Category', 'Supermarket/Store', 'File Attached', 'File Type'];\n\n  // Convert expense data to CSV rows\n  const csvRows = expenses.map(expense => {\n    const isReceipt = expense.imageUrl || expense.fileUrl;\n    return [formatDate(expense.date), isReceipt ? 'Receipt/Bill' : 'Manual Entry', isReceipt ? expense.supermarket || 'N/A' : expense.title || 'N/A', expense.amount || 0, expense.category || 'Uncategorized', expense.supermarket || 'N/A', expense.imageUrl || expense.fileUrl ? 'Yes' : 'No', expense.isPDF ? 'PDF' : expense.isImage ? 'Image' : 'N/A'].map(field => {\n      // Escape fields that contain commas, quotes, or newlines\n      const stringField = String(field || '');\n      if (stringField.includes(',') || stringField.includes('\"') || stringField.includes('\\n')) {\n        return `\"${stringField.replace(/\"/g, '\"\"')}\"`;\n      }\n      return stringField;\n    });\n  });\n\n  // Calculate totals\n  const totalAmount = expenses.reduce((sum, exp) => sum + parseFloat(exp.amount || 0), 0);\n  const totalCount = expenses.length;\n\n  // Add summary rows\n  csvRows.push([]);\n  csvRows.push(['Summary', '', '', '', '', '', '', '']);\n  csvRows.push(['Total Expenses', '', '', totalAmount.toFixed(2), '', '', '', '']);\n  csvRows.push(['Total Count', '', '', totalCount, '', '', '', '']);\n\n  // Combine headers and rows\n  const csvContent = [headers, ...csvRows].map(row => Array.isArray(row) ? row.join(',') : row).join('\\n');\n\n  // Create and download the file\n  const blob = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const link = document.createElement('a');\n  const url = URL.createObjectURL(blob);\n  link.setAttribute('href', url);\n  link.setAttribute('download', `${filename}_${new Date().toISOString().split('T')[0]}.csv`);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n\n// Convert expenses to Excel-like CSV format (tab-separated for better Excel compatibility)\nexport const exportToExcel = (expenses, filename = 'expenses') => {\n  if (!expenses || expenses.length === 0) {\n    alert('No data to export');\n    return;\n  }\n\n  // Excel-friendly headers\n  const headers = ['Date', 'Type', 'Description', 'Amount', 'Category', 'Store/Supermarket', 'Has File', 'File Type', 'File Name'];\n\n  // Convert expense data to tab-separated rows\n  const excelRows = expenses.map(expense => {\n    const isReceipt = expense.imageUrl || expense.fileUrl;\n    return [formatDate(expense.date), isReceipt ? 'Receipt/Bill' : 'Manual Entry', isReceipt ? expense.supermarket || 'N/A' : expense.title || 'N/A', parseFloat(expense.amount || 0), expense.category || 'Uncategorized', expense.supermarket || 'N/A', expense.imageUrl || expense.fileUrl ? 'Yes' : 'No', expense.isPDF ? 'PDF' : expense.isImage ? 'Image' : 'N/A', expense.fileName || 'N/A'].map(field => String(field || '').replace(/\\t/g, ' '));\n  });\n\n  // Calculate totals\n  const totalAmount = expenses.reduce((sum, exp) => sum + parseFloat(exp.amount || 0), 0);\n  const totalCount = expenses.length;\n  const receiptCount = expenses.filter(exp => exp.imageUrl || exp.fileUrl).length;\n  const manualCount = totalCount - receiptCount;\n\n  // Add summary rows\n  excelRows.push([]);\n  excelRows.push(['SUMMARY', '', '', '', '', '', '', '', '']);\n  excelRows.push(['Total Amount', '', '', totalAmount.toFixed(2), '', '', '', '', '']);\n  excelRows.push(['Total Expenses', '', '', totalCount, '', '', '', '', '']);\n  excelRows.push(['Receipt Entries', '', '', receiptCount, '', '', '', '', '']);\n  excelRows.push(['Manual Entries', '', '', manualCount, '', '', '', '', '']);\n\n  // Combine headers and rows with tabs\n  const tsvContent = [headers, ...excelRows].map(row => Array.isArray(row) ? row.join('\\t') : row).join('\\n');\n\n  // Create and download the file with .xls extension for Excel\n  const blob = new Blob([tsvContent], {\n    type: 'application/vnd.ms-excel;charset=utf-8;'\n  });\n  const link = document.createElement('a');\n  const url = URL.createObjectURL(blob);\n  link.setAttribute('href', url);\n  link.setAttribute('download', `${filename}_${new Date().toISOString().split('T')[0]}.xls`);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n\n// Export expenses by date range\nexport const exportExpensesByDate = async (startDate, endDate, format = 'csv') => {\n  try {\n    const response = await fetch(`http://127.0.0.1:5000/api/expenses/export?startDate=${startDate}&endDate=${endDate}`, {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch export data');\n    }\n    const expenses = await response.json();\n    const filename = startDate === endDate ? `expenses_${startDate}` : `expenses_${startDate}_to_${endDate}`;\n    if (format === 'excel') {\n      exportToExcel(expenses, filename);\n    } else {\n      exportToCSV(expenses, filename);\n    }\n    return {\n      success: true,\n      count: expenses.length\n    };\n  } catch (error) {\n    console.error('Export failed:', error);\n    alert('Failed to export data. Please try again.');\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\n// Quick export current filtered data\nexport const exportCurrentData = (expenses, format = 'csv', filename = 'current_expenses') => {\n  if (format === 'excel') {\n    exportToExcel(expenses, filename);\n  } else {\n    exportToCSV(expenses, filename);\n  }\n};","map":{"version":3,"names":["formatDate","dateStr","date","Date","Intl","DateTimeFormat","timeZone","year","month","day","hour","minute","format","exportToCSV","expenses","filename","length","alert","headers","csvRows","map","expense","isReceipt","imageUrl","fileUrl","supermarket","title","amount","category","isPDF","isImage","field","stringField","String","includes","replace","totalAmount","reduce","sum","exp","parseFloat","totalCount","push","toFixed","csvContent","row","Array","isArray","join","blob","Blob","type","link","document","createElement","url","URL","createObjectURL","setAttribute","toISOString","split","style","visibility","body","appendChild","click","removeChild","exportToExcel","excelRows","fileName","receiptCount","filter","manualCount","tsvContent","exportExpensesByDate","startDate","endDate","response","fetch","localStorage","getItem","ok","Error","json","success","count","error","console","message","exportCurrentData"],"sources":["D:/expense-tracker/frontend/src/utils/exportUtils.js"],"sourcesContent":["// Export utility functions for CSV and Excel generation\r\n\r\n// Format date for display\r\nconst formatDate = (dateStr) => {\r\n  if (!dateStr) return '';\r\n  const date = new Date(dateStr);\r\n  return new Intl.DateTimeFormat('en-IN', {\r\n    timeZone: 'Asia/Kolkata',\r\n    year: 'numeric',\r\n    month: '2-digit',\r\n    day: '2-digit',\r\n    hour: '2-digit',\r\n    minute: '2-digit'\r\n  }).format(date);\r\n};\r\n\r\n// Convert expenses to CSV format\r\nexport const exportToCSV = (expenses, filename = 'expenses') => {\r\n  if (!expenses || expenses.length === 0) {\r\n    alert('No data to export');\r\n    return;\r\n  }\r\n\r\n  // CSV headers\r\n  const headers = [\r\n    'Date',\r\n    'Type',\r\n    'Description',\r\n    'Amount (₹)',\r\n    'Category',\r\n    'Supermarket/Store',\r\n    'File Attached',\r\n    'File Type'\r\n  ];\r\n\r\n  // Convert expense data to CSV rows\r\n  const csvRows = expenses.map(expense => {\r\n    const isReceipt = expense.imageUrl || expense.fileUrl;\r\n    return [\r\n      formatDate(expense.date),\r\n      isReceipt ? 'Receipt/Bill' : 'Manual Entry',\r\n      isReceipt ? expense.supermarket || 'N/A' : expense.title || 'N/A',\r\n      expense.amount || 0,\r\n      expense.category || 'Uncategorized',\r\n      expense.supermarket || 'N/A',\r\n      (expense.imageUrl || expense.fileUrl) ? 'Yes' : 'No',\r\n      expense.isPDF ? 'PDF' : expense.isImage ? 'Image' : 'N/A'\r\n    ].map(field => {\r\n      // Escape fields that contain commas, quotes, or newlines\r\n      const stringField = String(field || '');\r\n      if (stringField.includes(',') || stringField.includes('\"') || stringField.includes('\\n')) {\r\n        return `\"${stringField.replace(/\"/g, '\"\"')}\"`;\r\n      }\r\n      return stringField;\r\n    });\r\n  });\r\n\r\n  // Calculate totals\r\n  const totalAmount = expenses.reduce((sum, exp) => sum + parseFloat(exp.amount || 0), 0);\r\n  const totalCount = expenses.length;\r\n\r\n  // Add summary rows\r\n  csvRows.push([]);\r\n  csvRows.push(['Summary', '', '', '', '', '', '', '']);\r\n  csvRows.push(['Total Expenses', '', '', totalAmount.toFixed(2), '', '', '', '']);\r\n  csvRows.push(['Total Count', '', '', totalCount, '', '', '', '']);\r\n\r\n  // Combine headers and rows\r\n  const csvContent = [headers, ...csvRows]\r\n    .map(row => Array.isArray(row) ? row.join(',') : row)\r\n    .join('\\n');\r\n\r\n  // Create and download the file\r\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n  const link = document.createElement('a');\r\n  const url = URL.createObjectURL(blob);\r\n  link.setAttribute('href', url);\r\n  link.setAttribute('download', `${filename}_${new Date().toISOString().split('T')[0]}.csv`);\r\n  link.style.visibility = 'hidden';\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n};\r\n\r\n// Convert expenses to Excel-like CSV format (tab-separated for better Excel compatibility)\r\nexport const exportToExcel = (expenses, filename = 'expenses') => {\r\n  if (!expenses || expenses.length === 0) {\r\n    alert('No data to export');\r\n    return;\r\n  }\r\n\r\n  // Excel-friendly headers\r\n  const headers = [\r\n    'Date',\r\n    'Type',\r\n    'Description',\r\n    'Amount',\r\n    'Category',\r\n    'Store/Supermarket',\r\n    'Has File',\r\n    'File Type',\r\n    'File Name'\r\n  ];\r\n\r\n  // Convert expense data to tab-separated rows\r\n  const excelRows = expenses.map(expense => {\r\n    const isReceipt = expense.imageUrl || expense.fileUrl;\r\n    return [\r\n      formatDate(expense.date),\r\n      isReceipt ? 'Receipt/Bill' : 'Manual Entry',\r\n      isReceipt ? expense.supermarket || 'N/A' : expense.title || 'N/A',\r\n      parseFloat(expense.amount || 0),\r\n      expense.category || 'Uncategorized',\r\n      expense.supermarket || 'N/A',\r\n      (expense.imageUrl || expense.fileUrl) ? 'Yes' : 'No',\r\n      expense.isPDF ? 'PDF' : expense.isImage ? 'Image' : 'N/A',\r\n      expense.fileName || 'N/A'\r\n    ].map(field => String(field || '').replace(/\\t/g, ' '));\r\n  });\r\n\r\n  // Calculate totals\r\n  const totalAmount = expenses.reduce((sum, exp) => sum + parseFloat(exp.amount || 0), 0);\r\n  const totalCount = expenses.length;\r\n  const receiptCount = expenses.filter(exp => exp.imageUrl || exp.fileUrl).length;\r\n  const manualCount = totalCount - receiptCount;\r\n\r\n  // Add summary rows\r\n  excelRows.push([]);\r\n  excelRows.push(['SUMMARY', '', '', '', '', '', '', '', '']);\r\n  excelRows.push(['Total Amount', '', '', totalAmount.toFixed(2), '', '', '', '', '']);\r\n  excelRows.push(['Total Expenses', '', '', totalCount, '', '', '', '', '']);\r\n  excelRows.push(['Receipt Entries', '', '', receiptCount, '', '', '', '', '']);\r\n  excelRows.push(['Manual Entries', '', '', manualCount, '', '', '', '', '']);\r\n\r\n  // Combine headers and rows with tabs\r\n  const tsvContent = [headers, ...excelRows]\r\n    .map(row => Array.isArray(row) ? row.join('\\t') : row)\r\n    .join('\\n');\r\n\r\n  // Create and download the file with .xls extension for Excel\r\n  const blob = new Blob([tsvContent], { type: 'application/vnd.ms-excel;charset=utf-8;' });\r\n  const link = document.createElement('a');\r\n  const url = URL.createObjectURL(blob);\r\n  link.setAttribute('href', url);\r\n  link.setAttribute('download', `${filename}_${new Date().toISOString().split('T')[0]}.xls`);\r\n  link.style.visibility = 'hidden';\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n};\r\n\r\n// Export expenses by date range\r\nexport const exportExpensesByDate = async (startDate, endDate, format = 'csv') => {\r\n  try {\r\n    const response = await fetch(`http://127.0.0.1:5000/api/expenses/export?startDate=${startDate}&endDate=${endDate}`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch export data');\r\n    }\r\n    \r\n    const expenses = await response.json();\r\n    \r\n    const filename = startDate === endDate \r\n      ? `expenses_${startDate}` \r\n      : `expenses_${startDate}_to_${endDate}`;\r\n    \r\n    if (format === 'excel') {\r\n      exportToExcel(expenses, filename);\r\n    } else {\r\n      exportToCSV(expenses, filename);\r\n    }\r\n    \r\n    return { success: true, count: expenses.length };\r\n  } catch (error) {\r\n    console.error('Export failed:', error);\r\n    alert('Failed to export data. Please try again.');\r\n    return { success: false, error: error.message };\r\n  }\r\n};\r\n\r\n// Quick export current filtered data\r\nexport const exportCurrentData = (expenses, format = 'csv', filename = 'current_expenses') => {\r\n  if (format === 'excel') {\r\n    exportToExcel(expenses, filename);\r\n  } else {\r\n    exportToCSV(expenses, filename);\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}