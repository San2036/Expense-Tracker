{"ast":null,"code":"// Password strength validation utility\n\nexport const passwordRequirements = [{\n  id: 'length',\n  text: 'At least 8 characters',\n  regex: /.{8,}/\n}, {\n  id: 'uppercase',\n  text: 'At least one uppercase letter',\n  regex: /[A-Z]/\n}, {\n  id: 'lowercase',\n  text: 'At least one lowercase letter',\n  regex: /[a-z]/\n}, {\n  id: 'number',\n  text: 'At least one number',\n  regex: /\\d/\n}, {\n  id: 'special',\n  text: 'At least one special character (!@#$%^&*)',\n  regex: /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/\n}];\nexport const validatePassword = password => {\n  const results = passwordRequirements.map(req => ({\n    ...req,\n    met: req.regex.test(password)\n  }));\n  const metCount = results.filter(r => r.met).length;\n  const totalCount = results.length;\n  let strength = 'weak';\n  let strengthColor = '#dc2626';\n  let strengthPercentage = 0;\n  if (metCount === totalCount) {\n    strength = 'strong';\n    strengthColor = '#16a34a';\n    strengthPercentage = 100;\n  } else if (metCount >= 3) {\n    strength = 'medium';\n    strengthColor = '#ca8a04';\n    strengthPercentage = metCount / totalCount * 100;\n  } else if (metCount >= 1) {\n    strength = 'weak';\n    strengthColor = '#dc2626';\n    strengthPercentage = metCount / totalCount * 100;\n  }\n  return {\n    requirements: results,\n    strength,\n    strengthColor,\n    strengthPercentage,\n    isValid: metCount === totalCount,\n    score: metCount\n  };\n};\nexport const generateStrongPassword = () => {\n  const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const lowercase = 'abcdefghijklmnopqrstuvwxyz';\n  const numbers = '0123456789';\n  const symbols = '!@#$%^&*()_+-=[]{}|;:,.<>?';\n  let password = '';\n\n  // Ensure at least one character from each category\n  password += uppercase[Math.floor(Math.random() * uppercase.length)];\n  password += lowercase[Math.floor(Math.random() * lowercase.length)];\n  password += numbers[Math.floor(Math.random() * numbers.length)];\n  password += symbols[Math.floor(Math.random() * symbols.length)];\n\n  // Fill the rest randomly (minimum 8 chars total)\n  const allChars = uppercase + lowercase + numbers + symbols;\n  for (let i = 4; i < 12; i++) {\n    password += allChars[Math.floor(Math.random() * allChars.length)];\n  }\n\n  // Shuffle the password\n  return password.split('').sort(() => Math.random() - 0.5).join('');\n};","map":{"version":3,"names":["passwordRequirements","id","text","regex","validatePassword","password","results","map","req","met","test","metCount","filter","r","length","totalCount","strength","strengthColor","strengthPercentage","requirements","isValid","score","generateStrongPassword","uppercase","lowercase","numbers","symbols","Math","floor","random","allChars","i","split","sort","join"],"sources":["D:/expense-tracker/frontend/src/utils/passwordValidator.js"],"sourcesContent":["// Password strength validation utility\r\n\r\nexport const passwordRequirements = [\r\n  { id: 'length', text: 'At least 8 characters', regex: /.{8,}/ },\r\n  { id: 'uppercase', text: 'At least one uppercase letter', regex: /[A-Z]/ },\r\n  { id: 'lowercase', text: 'At least one lowercase letter', regex: /[a-z]/ },\r\n  { id: 'number', text: 'At least one number', regex: /\\d/ },\r\n  { id: 'special', text: 'At least one special character (!@#$%^&*)', regex: /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/ }\r\n];\r\n\r\nexport const validatePassword = (password) => {\r\n  const results = passwordRequirements.map(req => ({\r\n    ...req,\r\n    met: req.regex.test(password)\r\n  }));\r\n\r\n  const metCount = results.filter(r => r.met).length;\r\n  const totalCount = results.length;\r\n\r\n  let strength = 'weak';\r\n  let strengthColor = '#dc2626';\r\n  let strengthPercentage = 0;\r\n\r\n  if (metCount === totalCount) {\r\n    strength = 'strong';\r\n    strengthColor = '#16a34a';\r\n    strengthPercentage = 100;\r\n  } else if (metCount >= 3) {\r\n    strength = 'medium';\r\n    strengthColor = '#ca8a04';\r\n    strengthPercentage = (metCount / totalCount) * 100;\r\n  } else if (metCount >= 1) {\r\n    strength = 'weak';\r\n    strengthColor = '#dc2626';\r\n    strengthPercentage = (metCount / totalCount) * 100;\r\n  }\r\n\r\n  return {\r\n    requirements: results,\r\n    strength,\r\n    strengthColor,\r\n    strengthPercentage,\r\n    isValid: metCount === totalCount,\r\n    score: metCount\r\n  };\r\n};\r\n\r\nexport const generateStrongPassword = () => {\r\n  const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n  const lowercase = 'abcdefghijklmnopqrstuvwxyz';\r\n  const numbers = '0123456789';\r\n  const symbols = '!@#$%^&*()_+-=[]{}|;:,.<>?';\r\n  \r\n  let password = '';\r\n  \r\n  // Ensure at least one character from each category\r\n  password += uppercase[Math.floor(Math.random() * uppercase.length)];\r\n  password += lowercase[Math.floor(Math.random() * lowercase.length)];\r\n  password += numbers[Math.floor(Math.random() * numbers.length)];\r\n  password += symbols[Math.floor(Math.random() * symbols.length)];\r\n  \r\n  // Fill the rest randomly (minimum 8 chars total)\r\n  const allChars = uppercase + lowercase + numbers + symbols;\r\n  for (let i = 4; i < 12; i++) {\r\n    password += allChars[Math.floor(Math.random() * allChars.length)];\r\n  }\r\n  \r\n  // Shuffle the password\r\n  return password.split('').sort(() => Math.random() - 0.5).join('');\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}